---
name: Deploy LOGIN

on:
  push:
    branches:
      - main

env:
  ECR_REPOSITORY: spv/login
  AWS_REGION: ${{ vars.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}

permissions:
    id-token: write
    contents: write
    packages: write
    attestations: write

jobs:
  pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt

      - name: Run pytest
        run: pytest -W ignore::DeprecationWarning

  build:
    name: Build APP
    runs-on: ubuntu-latest
    needs: pytest
    outputs:
      tagVersion: ${{ steps.imageVersion.outputs.version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Config AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::857378965163:role/github-actions

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          bash ./devops/git_update.sh -v patch

      - id: imageVersion
        run: echo "version=${{ steps.increment-git-tag.outputs.git-tag }}" >> "$GITHUB_OUTPUT"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_RELEASE: ${{ steps.increment-git-tag.outputs.git-tag }}
          ECR_REGISTRY:  ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          echo "Deploy Version: $IMAGE_RELEASE"
          echo "Repository Autenticate: $ECR_REGISTRY"
          docker build --no-cache --progress=plain -f devops/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_RELEASE .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_RELEASE $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_RELEASE
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy EKS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - env:
          IMG_RELEASE: ${{ needs.build.outputs.tagVersion }}
        run: echo "ECR_REPOSITORY = $ECR_REPOSITORY -- IMAGE_RELEASE = $IMG_RELEASE"

      - name: Config AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::857378965163:role/github-actions
    
      - name: Replace Image Release
        uses: richardrigutins/replace-in-files@v2
        with:
          files: 'k8s/app/login-deployment.yaml'
          search-text: 'IMAGE_VERSION'
          replacement-text: ${{ needs.build.outputs.tagVersion }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Deploy EKS
        env:
          IMG_RELEASE: ${{ needs.build.outputs.tagVersion }}
        run: |
          echo "Deploy Version: $IMG_RELEASE"
          echo "Deploy IMAGE: $ECR_REPOSITORY"
          kubectl apply -f k8s/namespace.yml
          kubectl apply -f k8s/app/login-service.yaml
          kubectl apply -f k8s/app/login-configmap.yaml
          kubectl apply -f k8s/app/login-deployment.yaml
          kubectl apply -f k8s/app/login-hpa.yaml
